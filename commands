
docker version

download an image. https://hub.docker.com/search?q=
  docker pull <image>
  docker pull M4gOo/my-image

make public in docker hub. when you push to the repository 
to make public you need first build the image and tag with your account name
  docker push M4gOo/my-image

login in the docker hub
  docker login

list of available images and their sizes on our host
  docker images

list containers running or not
  docker ps
  docker ps -a  (previously stopped or exited containers)
  
if the image is not local it will pull from the dockerhub
  docker run <image>
  docker run <image> sleep 5

run another version of image
  docker run <image:tag>

run foreground
  docker run <image>

run background
  docker run -d <image>

to run in attach mode again
  docker attach <ID_Container>

run interactive mode
  docker run -it <image>

name container
  docker run -d --name webapp nginx:1.14-alpine

to limiti resource
  docker run --cpu=.5 ubuntu
  docker run --memory=100m ubuntu
  
create link between containers (check in the source code)
  docker run -d --name webapp --link db:db result-app

port mapping / port publishing
Ports on the left(before ->) are published on the host.
  docker run -p 38282:8080 kodekloud/simple-webapp:blue
      - docker container internal IP only accessible within the docker host
      - user outside docker host needs host IP address and 
        need be an open port to map the container in the docker host

volume mapping - data persisted in the docker container
docker container has its own isolated file system
  docker run -v /opt/datadir:/var/lib/mysql mysql
  docker run -v /opt/data:/var/lib/mysql -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql
    /opt/datadir - path in the docker host
    /var/lib/mysql - path in the container to save the data for mysql
  
inspect a running container, find env variable set on container
  docker inspect <container_name/id> 
  
env variable set on container running (another way)
  run docker exec -it <ID_or_Name> env
  
size of layers
  docker history <image>
  
create your own Dockerfile and build the image.
  docker build Dockerfile -t M4gOo/my-image
  
check the logs
  docker logs <ID_or_name>

stop the container
  docker stop <ID_or_name>

remove container
  docker rm <ID_or_name> <ID_or_name> <ID_or_name>

remove image 
  docker rmi <image>
  
execute a command inside the container
  docker exec <ID_or_name> <command>
  
list network
  docker network ls


